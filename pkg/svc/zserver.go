package svc

import (
	"context"
	"github.com/golang/protobuf/ptypes/empty"
	"github.com/jinzhu/gorm"
	"my-app-example/pkg/pb"
	"my-app-example/pkg/svc/data"
)

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~~~~~~~~~~~~~~~~~~~~~~~~ A BRIEF DEVELOPMENT GUIDE ~~~~~~~~~~~~~~~~~~~~~~~~~
//
// TODO: Extend the MyAppExample service by defining new RPCs and
// and message types in the pb/service.proto file. These RPCs and messages
// compose the API for your service. After modifying the proto schema in
// pb/service.proto, call "make protobuf" to regenerate the protobuf files.
//
// TODO: Create an implementation of the MyAppExample server
// interface. This interface is generated by the protobuf compiler and exists
// inside the pb/service.pb.go file. The "server" struct already provides an
// implementation of MyAppExample server interface service, but only
// for the GetVersion function. You will need to implement any new RPCs you
// add to your protobuf schema.
//
// TODO: Update the GetVersion function when newer versions of your service
// become available. Feel free to change GetVersion to better-suit how your
// versioning system, or get rid of it entirely. GetVersion helps make up a
// simple "starter" example that allows an end-to-end example. It is not
// required.
//
// TODO: Oh yeah, delete this guide when you no longer need it.
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~ FAREWELL AND GOOD LUCK ~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

const (
	// version is the current version of the service
	version    = "0.0.1"
	someString = "Example of randome string"
)

// Default implementation of the MyAppExample server interface
type server struct{ db *gorm.DB }

// GetVersion returns the current version of the service
func (server) GetVersion(context.Context, *empty.Empty) (*pb.VersionResponse, error) {
	return &pb.VersionResponse{Version: version}, nil
}

// GetVersion returns the current version of the service
func (server) GetSomeString(context.Context, *empty.Empty) (*pb.SomeStringResponse, error) {
	return &pb.SomeStringResponse{SomeString: someString}, nil
}
func (server) TestPostMessage(ctx context.Context, val *pb.TestRequest) (*pb.SomeStringResponse, error) {
	return &pb.SomeStringResponse{SomeString: "Input string: " + val.Value}, nil
}
func (svr server) GetAllUsers(context.Context, *empty.Empty) (*pb.UsersResponse, error) {
	users := []data.MyUsers{}
	if err := svr.db.Table("my_users").Find(&users).Error; err != nil {
		return nil, err
	}
	respUsers := data.MyUsersArr(users).GetGrpcAnalogue().([]*pb.User)
	out := pb.UsersResponse{respUsers}
	return &out, nil
}
func (svr server) GetUserById(ctx context.Context, usr *pb.User) (*pb.User, error) {
	user := data.MyUsers{}
	if err := svr.db.Table("my_users").Where("id = ?", usr.UserId).First(&user).Error; err != nil{
		return nil, err
	}
	out := user.GetGrpcAnalogue().(pb.User)
	return &out, nil
}

// NewBasicServer returns an instance of the default server interface
func NewBasicServer(database *gorm.DB) (pb.MyAppExampleServer, error) {
	return &server{db: database}, nil
}
